--[[
ObjLua Runtime for Lua 5.1 and 5.2
Copyright (C) 2013 Elijah Frederickson

An entire ObjLua class is proxied to metatable magic :)

No need to call methods with ':' syntax, the 'self' arg is (theoretically, heh) automatically handled!

TODO: Fix static fields being nil from inside class functions
    e.g.: function <class>.a() return self.asampleprivatestaticfield end
Methods/fields -> properties
Non-named arguments with indexes of [1], [2], etc CANNOT be mapped :( FIX
Vararg functions to have '...' var, not just 'arg'
Multiple return value arg checking (huh? oh right: return x,y only checks x against the return type)

]]

local _VERSION = _VERSION
local getfenv

if _VERSION:match"5.2" then
    local compat_env = require'ObjLua.compat-env'
    local getfenv = compat_env.getfenv
else
    getfenv = _G.getfenv
end

_G.__objlua__ = true

local function deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

local function wrapFunction(func, args, returnType, funcName, argNumMap)
    local function getArg(arg)
        if type(arg) == 'table' and arg.Type then
            return arg.Name
        else
            return arg
        end
    end
    
    local function validateArg(arg, val)
        if type(arg) == 'table' and arg.Type then
            if objlua.IsOfType(val, arg.Type) then
                return val
            else
            
                local x = objlua.ConvertFrom(val, arg.Type)
                if x then
                    return x
                end
                --assert(x)
                --print(type(val), x, objlua.TypeOf(x), arg.Type)
                
                error("Expected type " .. objlua.TypeOf(arg.Type) .. " not " .. objlua.TypeOf2(val) .. (funcName and (" in function " .. funcName) or ""))
            end
        end
        return val
    end
    
    return function(self, ...)
        local arg = { ... }
        local env = getfenv(func)
        local replace = { }
        if type(arg[1]) == 'table' and arg[2] == nil then
            if #args == 0 then
                -- arg: {z=y}
                -- args: {x->z}
                replace['arg'] = { env['arg'] }
                env['arg'] = { }
                for k, v in pairs(arg[1]) do
                    --print(k, v)
                    if getArg(args[k]) == '...' then
                        if type(v) == 'table' and v.__objlua_constructed then
                            v.__objlua_constructed = nil
                            for k2, v2 in pairs(v) do
                                env['arg'][k2] = validateArg(args[k], v2)
                            end
                        elseif type(v) == 'table' and v.__objlua_dotsexpr then
                            --print(v[1])
                            env['arg'] = v[1]
                        else
                            table.insert(env['arg'], validateArg(args[k], v))
                        end
                        --print(env['...'])
                    else
                        local key = args[k] or k
                        --print(k, args[k], v, key, env[key], validateArg(args[k], v))
                        --replace[getArg(args[k])] = { env[getArg(args[k])] }
                        --env[getArg(args[k])] = validateArg(args[k], v)
                        replace[getArg(key)] = { env[getArg(key)] }
                        env[getArg(key)] = validateArg(key, v)
                    end
                end
            else
                for k, v in pairs(arg[1]) do
                    replace[k] = { env[k] }
                    env[k] = v
                end
            end
        else
            for k, v in pairs(arg) do
                --print("ASDFASDFASDF", k, v, args[k], getArg(args[k]))
                --print(k, v)
                if getArg(args[k]) then
                    replace[getArg(args[k])] = { env[getArg(args[k])] }
                    env[getArg(args[k])] = validateArg(args[k], v)
                else
                    if argNumMap then
                        local k_ = argNumMap[k]
                        --print('k_', k_[1], k_[2])
                        k_ = k_[2] or k_[1]
                        k = getArg(args[k_]) or k_
                        replace[k] = { env[k] }
                        env[k] = validateArg(args[k_], v)
                        --print(k, env[k])
                    else
                        replace[k] = { env[k] }
                        env[k] = v
                    end
                end
            end
        end
        --replace['self'] = { rawget(env, 'self') }
        --env.self = self
        local x = { func(...) }

        -- clean up
        for k, v in pairs(replace) do
            env[k] = v[1]
        end
        local x2 = objlua.ConvertFrom(x[1], returnType)
        --print(objlua.IsOfType(x[1], returnType), x2, returnType)
        --print(returnType, objlua.TypeOf2(x[1]), objlua.TypeOf2(x2), x2)
        if x2 then
            x[1] = x2
        end
        
        if not objlua.IsOfType(x[1], returnType) then
            error("Invalid return type '" .. objlua.TypeOf2(x[1]) .. "', expected " .. (tostring(returnType) or "<anything>").. (funcName and (" in function " .. funcName) or "<unknown>"))
        end
        
        --x[1] = ret or x[1]
        return unpack(x)
    end
end

local function wrapFunction2(func, args, returnType, funcName) -- static functions
    local function getArg(arg)
        if type(arg) == 'table' and arg.Type then
            return arg.Name
        else
            return arg
        end
    end
    
    local function validateArg(arg, val)
        if type(arg) == 'table' and arg.Type then
            if objlua.IsOfType(val, arg.Type) then
                return val
            else
                local x = objlua.ConvertFrom(val, arg.Type)
                if x then
                    return x
                end
                --assert(x)
                --print(type(val), x, objlua.TypeOf(x), arg.Type)
        
                error("Expected type " .. objlua.TypeOf(arg.Type) .. " not " .. objlua.TypeOf2(val).. (funcName and (" in static function " .. funcName) or ""))
            end
        end
        return val
    end
    
    return function(self, ...)
        local arg = { ... }
        local env = getfenv(func)
        local replace = { }
        if type(arg[1]) == 'table' and arg[2] == nil then
            if #args == 0 then
                -- arg: {z=y}
                -- args: {x->z}
                replace['arg'] = { env['arg'] }
                env['arg'] = { }
                for k, v in pairs(arg[1]) do
                    --print(k, v)
                    if getArg(args[k]) == '...' then
                        if type(v) == 'table' and v.__objlua_constructed then
                            v.__objlua_constructed = nil
                            for k2, v2 in pairs(v) do
                                --print(args[k], k2, v2)
                                env['arg'][k2] = validateArg(args[k], v2)
                            end
                        elseif type(v) == 'table' and v.__objlua_dotsexpr then
                            --print(v[1])
                            env['arg'] = v[1]
                        else
                            table.insert(env['arg'], validateArg(args[k], v))
                        end
                        --print(env['...'])
                    else
                        replace[getArg(args[k])] = { env[getArg(args[k])] }
                        env[getArg(args[k])] = validateArg(args[k], v)
                    end
                end
            else
                for k, v in pairs(arg[1]) do
                    replace[k] = { env[k] }
                    env[k] = v
                end
            end
        else
            for k, v in pairs(arg) do
                if getArg(args[k]) then
                    replace[getArg(args[k])] = { env[getArg(args[k])] }
                    env[getArg(args[k])] = validateArg(args[k], v)
                else
                    if argNumMap then
                        local k_ = argNumMap[k]
                        --print('k_', k_[1], k_[2])
                        k_ = k_[2] or k_[1]
                        k = getArg(args[k_]) or k_
                        replace[k] = { env[k] }
                        env[k] = validateArg(args[k_], v)
                        --print(k, env[k])
                    else
                        replace[k] = { env[k] }
                        env[k] = v
                    end
                end
            end
        end
        local x = { func(...) }
        -- clean up
        for k, v in pairs(replace) do
            env[k] = v[1]
        end
        
        local x2 = objlua.ConvertFrom(x[1], returnType)
        if x2 then
            x[1] = x2
        end
        
        if not objlua.IsOfType(x[1], returnType) then
            error("Invalid return type '" 
                .. (objlua.TypeOf2(x[1]) or "<unknown>")
                .. "', expected " 
                .. (objlua.TypeOf(returnType) or "<anything>")
                .. (funcName and (" in static function " .. funcName) or ""))
        end
        return unpack(x)
    end
end

-- returns a function that implicitly creates 'self' if needed
-- also defines static fields for usage
-- Thanks, __index!
local function wrapMethodForImmediateCalling(self, func, otherSuper)
    return function(...)
        local arg = { ... }
        --if arg[1] ~= self then
        --    table.insert(arg, 1, self)
        --end
        
        local env = getfenv(func)
        local replace = { }
        for k, v in pairs(getmetatable(objlua.getClass(self.ClassName)).staticFields) do
            replace[k] = env[k]
            env[k] = v.Value
        end
        replace['super'] = env['super']
        --env['super'] = objlua.getClass(getmetatable(self).inherits)
        env['super'] = setmetatable({ }, { 
            __index = function(t, k) 
                --print(otherSuper and otherSuper.ClassName or "no super")
                --print(self.ClassName, k)
                return objlua.getForASubclass(self, objlua.getClass(getmetatable(otherSuper or self).inherits), k) 
            end 
        })
        
        local __index = function(t, k)
            if k == 'self' then
                return self
            end
            --print(">>", k,type(k), self[k])
            return self[k]
        end
        
        --print("aSDF", objlua.TypeOf(self), objlua.TypeOf(env.self))
        replace['self'] = env['self']
        env['self'] = self
        
        local mt = getmetatable(env) or { }
        local old_index = mt.__index
        mt.__index = __index
        --[[mt.__newindex = function(t,k,v) 
            rawset(t,k,v) 
            print("'"..tostring(t).."'","'"..tostring(k).."'","'"..tostring(v).."'")
        end]]
        setmetatable(env, mt)
        
        --if not getmetatable(env.self).__instantiated and not getmetatable(env.super).__instantiated then
        --    error("cannot do dis fo u ")
        --end
        
        local ret = { func(unpack(arg)) }
        assert(ret)
        
        for k, v in pairs(replace) do
            if getmetatable(objlua.getClass(self.ClassName)).staticFields[k] then
                if getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Type then
                    if not objlua.IsOfType(env[k], getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Type) then
                        error("Invalid type '" 
                            .. (objlua.TypeOf2(env[k]) or "<unknown>")
                            .. "', expected " 
                            .. (objlua.TypeOf(getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Type) or "<anything>"))
                    end
                end
                getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Value = env[k]
            end
            env[k] = v
        end
        env['super'] = replace['super']
        
        mt.__index = old_index
        setmetatable(env, mt)
        
        return unpack(ret)
    end
end

local function wrapStaticFunctionForImmediateCalling(self, func, otherSuper)
    return function(...)
        local arg = { ... }
        
        local env = getfenv(func)
        local replace = { }
        for k, v in pairs(getmetatable(objlua.getClass(self.ClassName)).staticFields) do
            replace[k] = env[k]
            env[k] = v.Value
        end
        
        local __index = function(t, k)
            return self[k]
        end
        
        replace['super'] = env['super']
        --env['super'] = objlua.getClass(getmetatable(self).inherits)
        env['super'] = setmetatable({ }, { 
            __index = function(t, k) 
                --print(otherSuper and otherSuper.ClassName or "no super")
                --print(self.ClassName, k)
                return objlua.getForASubclass(self, objlua.getClass(getmetatable(otherSuper or self).inherits), k) 
            end 
        })
        
        local __index = function(t, k)
            return self[k]
        end
        replace['self'] = env['self']
        env.self = self
        
        local mt = getmetatable(env) or { }
        local old_index = mt.__index
        mt.__index = __index
        setmetatable(env, mt)
        
        local ret = { func(unpack(arg)) }
        assert(ret)
        
        for k, v in pairs(replace) do
            if getmetatable(objlua.getClass(self.ClassName)).staticFields[k] then
                if getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Type then
                    if not objlua.IsOfType(env[k], getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Type) then
                        error("Invalid type '" 
                            .. (objlua.TypeOf2(env[k]) or "<unknown>")
                            .. "', expected " 
                            .. (objlua.TypeOf(getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Type) or "<anything>"))
                    end
                end

                getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Value = env[k]
            end
            env[k] = v
        end
        env['super'] = replace['super']
        
        mt.__index = old_index
        setmetatable(env, mt)
        
        
        return unpack(ret)
    end
end

objlua = objlua or { }
objlua.classes = { }

--[[ -- unused... ConvertFrom will call ConvertTo on the from object if necessary
function objlua.ConvertTo(obj, toTypeStr)
    if objlua.IsOfType(obj, toTypeStr) then return obj end
    if type(obj) == 'table' and obj.ConvertTo then
        return [obj ConvertTo:toTypeStr]
    end
    return nil
end]]

function objlua.ConvertFrom(obj, toType)
--print("convFrom", objlua.TypeOf(obj), toType)
    if objlua.IsOfType(obj, toType) then return obj end
    if objlua.getClass(toType) and objlua.getClass(toType).ConvertFrom then
        --print(objlua.TypeOf2(obj), "-->", objlua.getClass(toType).ClassName)
        return [objlua.getClass(toType) ConvertFrom:objlua.TypeOf2(obj) value:obj]
    elseif obj.ConvertTo then
        return [obj ConvertTo:toType]
    end
    return nil
end

function objlua.getClassOrObject(a, b)
    return a or objlua.getClass(b)
end

function objlua.IsOfType(x, y)
    if x == nil or y == nil or y == 'nil' then
        return true
    end
    if type(x) == y then return true end
    if type(x) == 'table' then
        if x.ClassName == y then return true end
        if getmetatable(x).inherits then
            if objlua.IsOfType(objlua.getClass(getmetatable(x).inherits), y) then
                return true
            end
        end
    end
    return false
end

function objlua.TypeOf(x)
    if type(x) == 'table' and x.ClassName then return x.ClassName end
    if type(x) == 'nil' then return nil end
    if type(x) == 'string' then return x end
    return type(x)
end

function objlua.TypeOf2(x)
    if type(x) == 'table' and x.ClassName then return x.ClassName end
    if type(x) == 'nil' then return nil end
    return type(x)
end

function objlua.getClass(name)
    for k, v in pairs(objlua.classes) do
        if getmetatable(v).ClassName == name then
            return v
        end
        if getmetatable(v).ClassNameAliases then
            for k2, v2 in pairs(getmetatable(v).ClassNameAliases) do
                if v2 == name then
                    return v
                end
            end
        end
    end
    return nil
end

function objlua.throw(obj)
    if obj and objlua.IsOfType(obj, 'Exception') then
        return [Exception throw:obj]
    else
        error(tostring(obj or "<unknown exception>"))
    end
end

function objlua.isClass(class)
    return type(class) == 'table' and 
        getmetatable(class).ClassName and
        objlua.getClass(class.ClassName) and true
end

function objlua.getMethod(class, name)
    if objlua.isClass(class) then
        return class[name]
    else
        return getmetatable(objlua.getClass(class)).methods[name] and wrapMethodForImmediateCalling(objua.getClass(class), getmetatable(objlua.getClass(name)).methods[k]) or nil
    end
end

function objlua.getStaticMethod(class, name)
    if objlua.isClass(class) then
        return class[name]
    else
        return getmetatable(objlua.getClass(name)).static[k] and wrapStaticFunctionForImmediateCalling(objlua.getClass(class), getmetatable(objlua.getClass(name)).static[k]) or nil
    end
end

function objlua.doesMethodExist(class, name)
    local method = class[name]
    return method and type(method) == 'function'
end

function objlua.setMethod(class, methodName, func, args, returnType, argNumMap)
    getmetatable(objlua.getClass(class.ClassName)).methods[methodName] = wrapFunction(func, args or { }, returnType, methodName, argNumMap)-- args and wrapFunction(func, args) or func
end

function objlua.setStaticMethod(class, methodName, func, args, returnType, argNumMap)
    getmetatable(objlua.getClass(class.ClassName)).static[methodName] = args and wrapFunction2(func, args, returnType, methodName, argNumMap) or func
end

function objlua.setStaticField(class, field, value, isPrivate, type)
    if isPrivate == nil then
        isPrivate = true
    end
    getmetatable(objlua.getClass(class.ClassName)).staticFields[field] = { Value = value, Private = isPrivate, Type = type }
end

function objlua.getForASubclass(sub, super, field)
    if super then
        return getmetatable(super).__index(sub, field, super)
    else
        -- TODO: throw an error?
    end
end

function objlua.createClass(name, inherits, implements)
    if objlua.getClass(name) then
        return objlua.getClass(name)
    end
    
    local newClass = { }
    table.insert(objlua.classes, newClass)
    if name ~= 'Object' then
        inherits = inherits or 'Object'
    end
    
    setmetatable(newClass, { 
        __index = function(t, k, self_) 
            local function getTable()
                return self_ or t
            end
            
            if k == 'ClassName' then
                return getmetatable(getTable()).ClassName
            end
            local static = getmetatable(objlua.getClass(getTable().ClassName)).static[k]
            if static then return wrapStaticFunctionForImmediateCalling(t, static, getTable()) end
            
            local sfield = getmetatable(objlua.getClass(getTable().ClassName)).staticFields[k]
            if sfield and sfield.Private == false then return sfield.Value end
            
            --[[
                TODO: so that OBJECT.FIELD_WHICH_IS_A_PROPERTY automatically evaluates instead of returning a function
                
            if type(k) == 'string' then
                --print("checking for prop indexer...", k)
                local property = getmetatable(objlua.getClass(getTable().ClassName)).methods["set" .. k:sub(1,1):upper() .. k:sub(2)]
                local index_method = getmetatable(objlua.getClass(getTable().ClassName)).methods[k]
                if property and index_method then
                    return wrapMethodForImmediateCalling(t, getmetatable(getTable()).methods[k], getTable())()
                end
            end]]
            
            --print("inherits: ", getmetatable(getTable()).inherits or "nil")
            --print("key", k, getmetatable(getTable()).methods[k], wrapMethodForImmediateCalling(t, getmetatable(getTable()).methods[k], getTable()))
            
            --assert(objlua.getClass(name))
            
            return (getmetatable(getTable()).methods[k] and wrapMethodForImmediateCalling(t, getmetatable(getTable()).methods[k], getTable()))
                or (getmetatable(objlua.getClass(getTable().ClassName)).methods[k] and wrapMethodForImmediateCalling(t, getmetatable(objlua.getClass(getTable().ClassName)).methods[k], getTable()))
                or (getmetatable(getTable()).fields[k])
                or (getmetatable(getTable()).inherits 
                    and objlua.getForASubclass(t, objlua.getClass(getmetatable(getTable()).inherits), k))
                --or (getmetatable(getTable()).methods['__index'] WHY MUST yOU FAIL?? IT MAKES NO SENSE !!! TODO FIXME
                    --and [getTable() __index:k])
        end,
        __tostring = function(self, ...)
            return self:toString(...)
        end,
        __add = function(self, other) return [self __add:other] end,
		__sub = function(self, other) return [self __sub:other] end,
		__mul = function(self, other) return [self __mul:other] end,
		__div = function(self, other) return [self __div:other] end,
		__mod = function(self, other) return [self __mod:other] end,
		__pow = function(self, other) return [self __pow:other] end,
		__unm = function(self) return [self __unm] end,
		__concat = function(self, other) return [self __concat:other] end,
		__len = function(self) return [self __len] end,
		__lt = function(self, other) return [self __lt:other] end,
		__le = function(self, other) return [self __le:other] end,
        __eq = function(a, b) return [a __eq:b] end,
		__newindex = function(self, key, value)
            if type(value) == 'function' then
                -- wrapFunction(func, args, returnType, funcName, argNumMap)
                value = wrapFunction(value, { }, nil, key, nil)
                getmetatable(self).methods[key] = value
                return objlua.setMethod(self, key, value)
            end
            
            if type(key) == 'string' then
                --print("checking for prop...", key)
                local property = self["set" .. key:sub(1,1):upper() .. key:sub(2)]
                if property then
                    --print(self)
                    property(self, value)
                end
            end
            
            local sf = getmetatable(objlua.getClass(self.ClassName)).staticFields
            if sf[key] and sf[key].Private == false then
                sf[key].Value = value
            end
            
            local x = self.__newindex 
                and self.__newindex(self, key, value) or nil
            if x == nil or x then
                --print(self, key, value)
                getmetatable(self).fields[key] = value
                --print(self)
            end
            --self.__newindex(self, key, value) 
        end,
		__call = function(self, ...) [self __call:...] end,
        methods = { },
        static = { },
        ClassName = name,
        ClassNameAliases = { },
        fields = { },
        staticFields = { },
        inherits = inherits,
        implements = implements,
        __instantiated = false,
    })
    
    return newClass
end

function objlua.instantiateClass(name)
    local new = deepcopy(objlua.getClass(name))
    assert(new, "Unable to instantiate class")
    getmetatable(new).staticFields = nil
    getmetatable(new).static = nil
    getmetatable(new).__instantiated = true
    return new
end

function objlua.deallocClass(class)
    setmetatable(class, { })
    for k, v in pairs(class) do
        class[k] = nil
    end
    return class
end

function objlua.doesClassImplement(class, interfaceName)
    for k, v in pairs(getmetatable(objlua.getClass(class.ClassName)).implements) do
        if v == interfaceName then
            return true
        end
    end
    return false
end

function objlua.doesClassInherit(class, super)
    return getmetatable(objlua.getClass(class.ClassName)).inherits == super.ClassName
end

function objlua.createClassAlias(class, alias)
    table.insert(getmetatable(objlua.getClass(class.ClassName or class)).ClassNameAliases, alias)
end

function objlua.createMethodAlias(class, methodName, alias)
    objlua.getClass(class)[alias] = function(...) return objlua.getClass(class)[methodName](...) end
end

_G.objlua = objlua
return objlua
