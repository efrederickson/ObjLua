--[[
ObjLua Runtime version 1.0 for Lua 5.1.5
Copyright (C) 2013 Elijah Frederickson

An entire ObjLua class is proxied to metatable magic :)

No need to call methods with ':' syntax, the 'self' arg is automatically handled!

TODO: Fix static fields being nil from inside class functions
e.g.: function <class>.a() return self.asampleprivatestaticfield end
Methods/fields -> properties
garbage collecter [?]

]]

--
-- error[[This file is outdated, use & edit runtime.olua instead]]
--

_G.__objlua__ = true

local function deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

local function wrapFunction(func, args, returnType)
    local function getArg(arg)
        if type(arg) == 'table' and arg.Type then
            return arg.Name
        else
            return arg
        end
    end
    
    local function validateArg(arg, val)
        if type(arg) == 'table' and arg.Type then
            if objlua.IsOfType(val, arg.Type) then
                return true
            else
                error("Expected type " .. objlua.TypeOf(arg.Type) .. " not " .. objlua.TypeOf2(val))
            end
        end
        return true
    end
    
    return function(self, ...)
        local arg = { ... }
        local env = getfenv(func)
        local replace = { }
        if type(arg[1]) == 'table' and arg[2] == nil then
            if #args == 0 then
                -- arg: {z=y}
                -- args: {x->z}
                replace['arg'] = { env['arg'] }
                env['arg'] = { }
                for k, v in pairs(arg[1]) do
                    --print(k, v)
                    if getArg(args[k]) == '...' then
                        if type(v) == 'table' and v.__objlua_constructed then
                            v.__objlua_constructed = nil
                            for k2, v2 in pairs(v) do
                                env['arg'][k2] = validateArg(args[k], v2)
                            end
                        else
                            validateArg(args[k], v)
                            table.insert(env['arg'], v)
                        end
                        --print(env['...'])
                    else
                        validateArg(args[k], v)
                        replace[getArg(args[k])] = { env[getArg(args[k])] }
                        env[getArg(args[k])] = v
                    end
                end
            else
                for k, v in pairs(arg[1]) do
                    replace[k] = { env[k] }
                    env[k] = v
                end
            end
        else
            for k, v in pairs(arg) do
                --print(k, v)
                if getArg(args[k]) then
                    validateArg(args[k], v)
                    replace[getArg(args[k])] = { env[getArg(args[k])] }
                    env[getArg(args[k])] = v
                else
                    replace[k] = { v }
                    env[k] = v
                end
            end
        end
        replace['self'] = { rawget(env, 'self') }
        env.self = self
        local x = { func(self, ...) }
        -- clean up
        for k, v in pairs(replace) do
            env[k] = v[1]
        end
        
        --local ret = objlua.Convert(x[1], returnType)
        
        if not objlua.IsOfType(ret, returnType) 
            --or (x[1] ~= nil and ret == nil) 
            then
            error("Invalid return type '" .. objlua.TypeOf2(x[1]) .. "', expected " .. (tostring(returnType) or "<anything>"))
        end
        
        --x[1] = ret or x[1]
        
        return unpack(x)
    end
end

local function wrapFunction2(func, args, returnType) -- static functions
    local function getArg(arg)
        if type(arg) == 'table' and arg.Type then
            return arg.Name
        else
            return arg
        end
    end
    
    local function validateArg(arg, val)
        if type(arg) == 'table' and arg.Type then
            if objlua.IsOfType(val, arg.Type) then
                return val
            else
                error("Expected type " .. objlua.TypeOf(arg.Type) .. " not " .. objlua.TypeOf2(val))
            end
        end
        return true
    end
    
    return function(self, ...)
        local arg = { ... }
        local env = getfenv(func)
        local replace = { }
        if type(arg[1]) == 'table' and arg[2] == nil then
            if #args == 0 then
                -- arg: {z=y}
                -- args: {x->z}
                replace['arg'] = { env['arg'] }
                env['arg'] = { }
                for k, v in pairs(arg[1]) do
                    --print(k, v)
                    if getArg(args[k]) == '...' then
                        if type(v) == 'table' and v.__objlua_constructed then
                            v.__objlua_constructed = nil
                            for k2, v2 in pairs(v) do
                                env['arg'][k2] = validateArg(args[k], v2)
                            end
                        else
                            validateArg(args[k], v)
                            table.insert(env['arg'], v)
                        end
                        --print(env['...'])
                    else
                        validateArg(args[k], v)
                        replace[getArg(args[k])] = { env[getArg(args[k])] }
                        env[getArg(args[k])] = v
                    end
                end
            else
                for k, v in pairs(arg[1]) do
                    replace[k] = { env[k] }
                    env[k] = v
                end
            end
        else
            for k, v in pairs(arg) do
                --print(k, v, getArg(args[k]))
                validateArg(args[k] or k, v)
                replace[getArg(args[k]) or k] = { env[getArg(args[k]) or k] }
                env[getArg(args[k]) or k] = v
            end
        end
        local x = { func(...) }
        -- clean up
        for k, v in pairs(replace) do
            env[k] = v[1]
        end
        
        if not objlua.IsOfType(x[1], returnType) then
            error("Invalid return type '" 
                .. (objlua.TypeOf2(x[1]) or "<unknown>")
                .. "', expected " 
                .. (objlua.TypeOf(returnType) or "<anything>"))
        end
        
        return unpack(x)
    end
end

-- returns a function that implicitly creates 'self' if needed
-- also defines static fields for usage
-- Thanks, __index!
local function wrapMethodForImmediateCalling(self, func, otherSuper)
    return function(...)
        local arg = { ... }
        if arg[1] ~= self then
            table.insert(arg, 1, self)
        end
        
        local env = getfenv(func)
        local replace = { }
        for k, v in pairs(getmetatable(objlua.getClass(self.ClassName)).staticFields) do
            replace[k] = { env[k] }
            env[k] = v.Value
        end
        replace['super'] = env['super']
        --env['super'] = objlua.getClass(getmetatable(self).inherits)
        env['super'] = setmetatable({ }, { 
            __index = function(t, k) 
                --print(otherSuper and otherSuper.ClassName or "no super")
                --print(self.ClassName, k)
                return objlua.getForASubclass(self, objlua.getClass(getmetatable(otherSuper or self).inherits), k) 
            end 
        })
        
        local __index = function(t, k)
            --if k == 'self' then
            --    return self
            --end
            return self[k]
        end
        
        local mt = getmetatable(env) or { }
        local old_index = mt.__index
        mt.__index = __index
        setmetatable(env, mt)
        
        local ret = { func(unpack(arg)) }
        assert(ret)
        
        for k, v in pairs(replace) do
            if getmetatable(objlua.getClass(self.ClassName)).staticFields[k] then
                if getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Type then
                    if not objlua.IsOfType(env[k], getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Type) then
                        error("Invalid type '" 
                            .. (objlua.TypeOf2(env[k]) or "<unknown>")
                            .. "', expected " 
                            .. (objlua.TypeOf(getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Type) or "<anything>"))
                    end
                end
                getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Value = env[k]
            end
            env[k] = v[1]
        end
        env['super'] = replace['super']
        
        mt.__index = old_index
        setmetatable(env, mt)
        
        return unpack(ret)
    end
end

local function wrapStaticFunctionForImmediateCalling(self, func, otherSuper)
    return function(...)
        local arg = { ... }
        
        local env = getfenv(func)
        local replace = { }
        for k, v in pairs(getmetatable(objlua.getClass(self.ClassName)).staticFields) do
            replace[k] = { env[k] }
            env[k] = v.Value
        end
        
        local __index = function(t, k)
            return self[k]
        end
        
        replace['super'] = env['super']
        --env['super'] = objlua.getClass(getmetatable(self).inherits)
        env['super'] = setmetatable({ }, { 
            __index = function(t, k) 
                --print(otherSuper and otherSuper.ClassName or "no super")
                --print(self.ClassName, k)
                return objlua.getForASubclass(self, objlua.getClass(getmetatable(otherSuper or self).inherits), k) 
            end 
        })
        
        local __index = function(t, k)
            if k == 'self' then
                return self
            end
            return self[k]
        end
        
        local mt = getmetatable(env) or { }
        local old_index = mt.__index
        mt.__index = __index
        setmetatable(env, mt)
        
        local ret = { func(unpack(arg)) }
        assert(ret)
        
        for k, v in pairs(replace) do
            if getmetatable(objlua.getClass(self.ClassName)).staticFields[k] then
                if getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Type then
                    if not objlua.IsOfType(env[k], getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Type) then
                        error("Invalid type '" 
                            .. (objlua.TypeOf2(env[k]) or "<unknown>")
                            .. "', expected " 
                            .. (objlua.TypeOf(getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Type) or "<anything>"))
                    end
                end

                getmetatable(objlua.getClass(self.ClassName)).staticFields[k].Value = env[k]
            end
            env[k] = v[1]
        end
        env['super'] = replace['super']
        
        mt.__index = old_index
        setmetatable(env, mt)
        
        
        return unpack(ret)
    end
end

objlua = objlua or { }
objlua.classes = { }

function objlua.Convert(obj, toTypeStr)
    local to = objlua.getClass(toTypeStr)
    if not to then return nil end
    
    if obj.ConvertTo then
        -- wow much hacks. so ugly. such fail.
        -- ... but it works.
        local x = objlua.loadstring('return [x ConvertTo:y]')
        getfenv(x).x = obj
        getfenv(x).y = toTypeStr
        return x()
    end
    return nil
end

function objlua.getClassOrObject(a, b)
    return a or objlua.getClass(b)
end

function objlua.IsOfType(x, y)
    if x == nil or y == nil or y == 'nil' then
        return true
    end
    if type(x) == y then return true end
    if type(x) == 'table' then
        if x.ClassName == y then return true end
        if getmetatable(x).inherits then
            if objlua.IsOfType(objlua.getClass(getmetatable(x).inherits), y) then
                return true
            end
        end
    end
    return false
end

function objlua.TypeOf(x)
    if type(x) == 'table' and x.ClassName then return x.ClassName end
    if type(x) == 'nil' then return nil end
    if type(x) == 'string' then return x end
    return type(x)
end

function objlua.TypeOf2(x)
    if type(x) == 'table' and x.ClassName then return x.ClassName end
    if type(x) == 'nil' then return nil end
    return type(x)
end

function objlua.getClass(name)
    for k, v in pairs(objlua.classes) do
        if getmetatable(v).ClassName == name then
            return v
        end
    end
    return nil
end

function objlua.throw(obj)
    if obj and objlua.IsOfType(obj, 'Exception') then
        local x = objlua.loadstring('[Exception throw:ex]')
        getfenv(x).ex = obj
        x(obj)
        --objlua.getClass('Exception').throw(obj)
    else
        error(tostring(obj or "<unknown exception>"))
    end
end

function objlua.isClass(class)
    return type(class) == 'table' and 
        getmetatable(class).ClassName and
        objlua.getClass(class.ClassName) and true
end

function objlua.getMethod(class, name)
    if objlua.isClass(class) then
        return class[name]
    else
        return getmetatable(objlua.getClass(class)).methods[name] and wrapMethodForImmediateCalling(objua.getClass(class), getmetatable(objlua.getClass(name)).methods[k]) or nil
    end
end

function objlua.getStaticMethod(class, name)
    if objlua.isClass(class) then
        return class[name]
    else
        return getmetatable(objlua.getClass(name)).static[k] and wrapStaticFunctionForImmediateCalling(objlua.getClass(class), getmetatable(objlua.getClass(name)).static[k]) or nil
    end
end

function objlua.doesMethodExist(class, name)
    local method = class[name]
    return method and type(method) == 'function'
end

function objlua.setMethod(class, methodName, func, args, returnType)
    getmetatable(objlua.getClass(class.ClassName)).methods[methodName] = wrapFunction(func, args or { }, returnType)-- args and wrapFunction(func, args) or func
end

function objlua.setStaticMethod(class, methodName, func, args, returnType)
    getmetatable(objlua.getClass(class.ClassName)).static[methodName] = args and wrapFunction2(func, args, returnType) or func
end

function objlua.setStaticField(class, field, value, isPrivate, type)
    if isPrivate == nil then
        isPrivate = true
    end
    getmetatable(objlua.getClass(class.ClassName)).staticFields[field] = { Value = value, Private = isPrivate, Type = type }
end

function objlua.getForASubclass(sub, super, field)
    return getmetatable(super).__index(sub, field, super)
end

function objlua.createClass(name, inherits, implements)
    local newClass = { }
    table.insert(objlua.classes, newClass)
    if name ~= 'Object' then
        inherits = inherits or 'Object'
    end
    
    setmetatable(newClass, { 
        __index = function(t, k, self_) 
            local function getTable()
                return self_ or t
            end
            
            if k == 'ClassName' then
                return getmetatable(getTable()).ClassName
            end
            if k == 'Type' then
                return objlua.getClass(getmetatable(getTable()).ClassName)
            end
            local static = getmetatable(getTable()).static[k]
            if static then return wrapStaticFunctionForImmediateCalling(t, static, getTable()) end
            
            local sfield = getmetatable(getTable()).staticFields[k]
            if sfield and sfield.Private == false then return sfield.Value end
            --print(name, getmetatable(getTable()).inherits, k)
            --print(getmetatable(getTable()).inherits or "nil")
            return (getmetatable(getTable()).methods[k] and wrapMethodForImmediateCalling(t, getmetatable(getTable()).methods[k], getTable()))
                or getmetatable(getTable()).fields[k]
                or (getmetatable(getTable()).inherits 
                    and objlua.getForASubclass(t, objlua.getClass(getmetatable(getTable()).inherits), k))
                --or (getmetatable(getTable()).methods['__index'] WHY MUST yOU FAIL?? IT MAKES NO SENSE !!! TODO FIXME
                    --and wrapMethodForImmediateCalling(getTable(), getmetatable(getTable()).methods['__index'])(getTable(), k))
        end,
        __tostring = function(self, ...)
            return self:toString(...)
        end,
        __add = function(self, other) return self.__add(self, other) end,
		__sub = function(self, other) return self.__sub(self, other) end,
		__mul = function(self, other) return self.__mul(self, other) end,
		__div = function(self, other) return self.__div(self, other) end,
		__mod = function(self, other) return self.__mod(self, other) end,
		__pow = function(self, other) return self.__pow(self, other) end,
		__unm = function(self) self.__unm(self) end,
		__concat = function(self, other) self.__concat(self, other) end,
		__len = function(self) self.__len(self) end,
		__lt = function(self, other) self.__lt(self, other) end,
		__le = function(self, other) self.__le(self, other) end,
        __eq = function(a, b) return a.__eq(a,b) end,
		__newindex = function(self, key, value) 
            if type(value) == 'function' then
                return objlua.setMethod(self, key, value)
            end
            local x = self.__newindex 
                and self.__newindex(self, key, value) or nil
            if x == nil or x then
                getmetatable(self).fields[key] = value
            end
            --self.__newindex(self, key, value) 
        end,
		__call = function(self, ...) return self:__call(...) end,
        methods = { },
        static = { },
        ClassName = name,
        fields = { },
        staticFields = { },
        inherits = inherits,
        implements = implements,
    })
    
    return newClass
end

function objlua.instantiateClass(name)
    local new = deepcopy(objlua.getClass(name))
    return new
end

function objlua.deallocClass(class)
    setmetatable(class, { })
    for k, v in pairs(class) do
        class[k] = nil
    end
    return class
end

function objlua.doesClassImplement(class, interfaceName)
    for k, v in pairs(getmetatable(objlua.getClass(class.ClassName)).implements) do
        if v == interfaceName then
            return true
        end
    end
    return false
end

function objlua.doesClassInherit(class, super)
    return getmetatable(objlua.getClass(class.ClassName)).inherits == super.ClassName
end

function objlua.setMethod_(class, returnType, argTable, func)
    local methodName = ""
    local patchedArgs = { }
    local x = table.remove(argTable, 1)
    methodName = x.Name
    local args = { }
    for k, v in pairs(patchedArgs) do
        args[v.Name] = v.ArgName
    end
    getmetatable(objlua.getClass(class.ClassName)).methods[methodName] = args and wrapFunction(func, args) or func
end

return objlua
